name: Django CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  DJANGO_VERSION: '5.1'
  POSTGRES_DB: jozen_test
  POSTGRES_USER: jozen_test
  POSTGRES_PASSWORD: jozen_test_password

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client libpq-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov flake8 black isort bandit safety

    - name: Run linting and code formatting checks
      run: |
        echo "=== Running Black (code formatting) ==="
        black --check --diff .
        
        echo "=== Running isort (import sorting) ==="
        isort --check-only --diff .
        
        echo "=== Running Flake8 (linting) ==="
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run security checks
      run: |
        echo "=== Running Bandit (security linting) ==="
        bandit -r . -f json -o bandit-report.json || true
        
        echo "=== Running Safety (dependency security) ==="
        safety check --json --output safety-report.json || true

    - name: Set up test environment
      run: |
        export DJANGO_SETTINGS_MODULE=jozen.settings
        export DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        export DJANGO_SECRET_KEY=test-secret-key-for-ci
        export DEBUG=False
        export ALLOWED_HOSTS=localhost,127.0.0.1

    - name: Run database migrations
      run: |
        python manage.py migrate --verbosity=2
      env:
        DJANGO_SETTINGS_MODULE: jozen.settings
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        DJANGO_SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
        ALLOWED_HOSTS: localhost,127.0.0.1

    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput --verbosity=2
      env:
        DJANGO_SETTINGS_MODULE: jozen.settings
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        DJANGO_SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
        ALLOWED_HOSTS: localhost,127.0.0.1

    - name: Run tests with coverage
      run: |
        pytest --cov=onnanoko --cov=jozen --cov-report=xml --cov-report=html --cov-report=term-missing --verbosity=2
      env:
        DJANGO_SETTINGS_MODULE: jozen.settings
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        DJANGO_SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
        ALLOWED_HOSTS: localhost,127.0.0.1

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t booru:latest .
        docker images

    - name: Test Docker container
      run: |
        docker run --rm -d --name booru-test -p 8000:8000 booru:latest
        sleep 10
        curl -f http://localhost:8000/ || exit 1
        docker stop booru-test

  deploy-preview:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Comment PR with test results
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'âœ… All tests passed! This PR is ready for review.'
          })

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
